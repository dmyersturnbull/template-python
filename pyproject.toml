###################
# build-system
###################
[build-system]
requires = ["hatchling~=1.7"]
build-backend = "hatchling.build"


###################
# Project
###################

[project]
name = "tyranno"
requires-python = "~=3.9"
readme = {file = "README.md", content-type = "text/markdown"}
version = "1.0.0-0"
description = "Generate beautifully modern Python projects with seamless, GitHub-based CI/CD and loads of integrations."
maintainers = [
  {name="Douglas Myers-Turnbull", email=" dmyersturnbull@gmail.com"}
]
authors = [
  {name="Douglas Myers-Turnbull", email=" dmyersturnbull@gmail.com"}
]
license = {text="Apache-2.0"}
keywords = ["python", "template", "pyproject-toml", "python-poetry", "conda-build"]
classifiers = [
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Code Generators"
]
dependencies = [
  "jmespath           ~=1.0",
  "grayskull          ~=2.3",
  "httpx              >=0.24,<1.0",
  "loguru             >=0.7,<1.0",
  "platformdirs       ~=3.8",
  "pypi-simple        ~=1.1",
  "rich               >=13",
  "ruamel.yaml        >=0.17,<1.0",
  "tomlkit            >=0.11,<1.0",
  "typer[all]         ~=0.9"
]

#===== Scripts =====#
[project.scripts]
# :tyranno: ${project.name} = "${project.name}.__main__:cli"
tyranno = "tyranno.__main__:cli"

#===== URLs =====#
[project.urls]
# :tyranno: ${.home}
Homepage = "https://github.com/dmyersturnbull/tyranno"
# :tyranno: ${.home}
Source = "https://github.com/dmyersturnbull/tyranno"
# :tyranno: https://${.frag}.readthedocs.io
Documentation = "https://tyranno.readthedocs.io"
# :tyranno: ${.home}/issues
Tracker = "https://github.com/dmyersturnbull/tyranno/issues"
# :tyranno: https://pypi.org/project/${project.name}
Download = "https://pypi.org/project/tyranno/"
# :tyranno: ${.home}/blob/main/CHANGELOG.md
Changelog = "https://github.com/dmyersturnbull/tyranno/blob/main/CHANGELOG.md"


###################
# Hatch
###################

[tool.hatch.envs.default]
dependencies = [
  "pre-commit         ~=3.3",
  "bandit             ~=1.7",
  "hypothesis         ~=6.0",
  "pytest             ~=7.0",
  "coverage[toml]     ~=7.0",
  "pytest-cov         ~=3.0",
  "mypy               ~=1.4",
  "ruff               >=0.0.280",
  "sphinx             ~=7.0",
  "sphinx-autoapi     ~2.0",
  "sphinx-copybutton  >=0.5",
  "furo               >=2023",
  "myst-parser        ~=2.0",
  "sphinx-autodoc2    >=0.4"
]

[tool.hatch.envs.default.scripts]
test = [
  "pytest --cov=tyranno tests/",
]
lint = [
  "ruff {args:.}",
  "mypy --non-interactive {args:src/tyranno tests}"
]
fmt = [
  "black {args:.}",
  "ruff --fix-only {args:.}",
]
clean = [
  "tyranno clean"
]
docs = [
  "sphinx-build -b html docs docs/html"
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11"]



###################
# Ruff
###################

[tool.ruff]
line-length = 120
include = [
  "*.py",            # Source
  "*.pyi",           # Compiled
  "pyproject.toml",  # This (RUF checks)
  "*.ipynb"          # Jupyter notebooks
]
select = [
  "A",        # flake8-builtins
  "ANN",      # flake8-annotations
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "BLE",      # flake8-blind-exception
  "C",        # flake8-comprehensions
  "COM",      # flake8-commas
  "DTZ",      # flake8-datetimez
  "EM",       # flake8-errmsg
  "F",        # pyflakes
  "FA",       # flake8-future-annotations
  "E",        # flake8 errors (most fixed by black; rest are nitpicky)
  "G",        # flake8-logging-concat
  "I",        # isort
  "INP",      # flake8-no-pep420
  "ISC",      # flake8-implicit-str-concat
  "N",        # flake8-naming
  "NPY",      # numpy-specific rules
  "PERF",     # perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PTH",      # flake8-use-pathlib
  "Q",        # flake8-quotes
  "RUF",      # Ruff-specific tests
  "S",        # bandit
  "SIM",      # flake8-simplify
  "SLOT",     # flake8-slots
  "T10",      # debugger
  "TCH",      # flake8-type-checking
  "TID",      # flake8-tidy-imports (mostly bans relative imports)
  "UP",       # pyupgrade
  "W",        # warnings (most fixed by Black, but W605 is invalid escape char)
  "YTT",      # flake8-2020 (unlikely problematic checks for Python version)
  "RUF"       # Ruff-specific rules
]
exclude = [
  "ARG",      # flake8-unused (unused parameters are almost always intentional, like when overriding)
  "FBT",      # flake8-boolean-trap (debatable, and might not have a choice)
  "ICN",      # flake8-import-conventionals (isort does this)
]
ignore = [
  "B027",     # Allow non-abstract empty methods in abstract base classes
  "FBT003",   # Allow boolean positional values in function calls, like `dict.get(... True)`
  "C901",     # Ignore complexity:
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "D107",     # Missing docstring in __init__ (put in class docstring)
  "D212",     # Multi-line docstring start (contradictory)
  "E203",     # Colons with space before (sometimes useful expand)
  "E225",     # Missing whitespace around operator (sometimes useful to condense)
  "E501",     # Line > 79 chars (we use black)
]
unfixable = [
  "F401",     # Don't touch unused imports
  "RUF100",   # Unused noqa (should fix manually)
]
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
isort.known-first-party = ["tyranno"]
flake8-tidy-imports.ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = [
  "PLR2004",  # magic values
  "S101",     # assert
  "TID252",   # relative imports
  "S105",     # Ignore checks for possible passwords
  "S106",
  "S107",
  "S108",     # Harcoded temp file
]


###################
# pytest
###################
#[tool.pytest]  # in a future version of pytest
[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# :tyranno: source = addopts = "--cov ${project.name} --cov-report term-missing"
addopts = "--cov tyranno --cov-report term-missing"


###################
# coverage
###################

[tool.coverage.run]
# :tyranno: source_pkgs = ["${project.name}"]
source_pkgs = ["tyranno"]

[tool.coverage.paths]
tyranno = ["src/tyranno"]
tests = ["tests"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


###################
# Black
###################
[tool.black]
# :tyranno: line-length = ${tool.ruff.line-length}
line-length = 100
skip-string-normalization = true


###################
# Commitizen
###################
[tool.commitizen]
# Remove when major version > 0
major_version_zero = true
annotated_tag = true
gpg_sign = true
version_scheme = "semver"
version = "1.0.0-0"
bump_message = "chore: bump version $current_version → $new_version"
pre_bump_hooks = [
  "tyranno sync"  # make the versions match
]


###################
# Tyranno
###################

#===== Tyranno targets to sync =====#
[tool.tyranno.targets]
add-defaults = true
add          = []
exclude      = []

#===== Tyranno targets to auto-sync =====#
[tool.tyranno.auto-sync]
headers     = true
license     = true
environment = true

#===== Tyranno 'clean' command =====#
[tool.tyranno.trash]
add-defaults   = true
add            = []
exclude        = []

#===== Tyranno main data =====#
[tool.tyranno.data]
src-dir           = "src"
vendor            = "dmyersturnbull"
frag              = "${.vendor}/${project.name}"
home              = "https://github.com/{.frag}"
copyright         = "$2020–${~|year(now_utc())~} Contributors to ${project.name}"
long_description  = """
    An opinionated, forwards-looking Python template for 2023. Generate ready-to-go Python projects with
    superb continuous integration and deployment (CI/CD). Integrated with Docker Hub, the GitHub Container Registry,
    Conda-Forge, and an array of linting, static analysis, security testing, documentation, dependency management, and
    CI/CD tools, including a custom tool to synchronize project metadata like copyright, etc. to your pyproject.toml.
    You only need to interact with your project via git, tyranno, and GitHub releases – all other integrations
    kick off from there.
    """
