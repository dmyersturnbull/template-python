# SPDX-License-Identifier: Apache-2.0
# Source: https://github.com/dmyersturnbull/tyranno
import re

import httpx
import typer
from loguru import logger


class CondaForgeHelper:
    def has_pkg(self, name: str):
        # unfortunately, Anaconda returns 200 even if the page doesn't exist
        try:
            r = httpx.get(f"https://anaconda.org/conda-forge/{name}")
        except OSError:
            logger.exception(
                f"Failed fetching from anaconda.org. Assuming {name} is in Conda-Forge.",
            )
            return True
        return "login?next" not in r.url


class EnvHelper:
    def process(self, name: str, deps, extras: bool) -> list[str]:
        helper = CondaForgeHelper()
        lines = [
            "# auto-generated by `tyranno sync`",
            "name: " + name,
            "channels:",
            "    - conda-forge",
            "dependencies:",
        ]
        not_in = []
        for key, value in deps.items():
            # TODO
            if not isinstance(value, str):
                if value.get("optional") is True and not extras:
                    continue
                if "extras" in value:
                    logger.error(f"'extras' not supported for {key} = {value}")
                value = value.get("version")
            if "^" in value:
                raise ValueError(value)
            # TODO handle ~ correctly
            if "~" in value:
                vr_pat_1 = re.compile(r"^[^~]([0-9]+)(?:\.([0-9]+))?(?:\.([0-9]+))?$")
                if (match := vr_pat_1.fullmatch(value)) is not None:
                    value = f">={match.group(1)}.{match.group(2)},<{int(match.group(1)) + 1}.0"
                else:
                    logger.error(f"Couldn't parse {key} = {value}")
            line = "    - " + key + value.replace(" ", "")
            if helper.has_pkg(key):
                lines.append(line)
            else:
                not_in.append(line)
        typer.echo(f"Found {len(not_in)} dependencies not in Conda-Forge.")
        if len(not_in) > 0:
            # TODO: hardcoded pip version
            lines += ["    - pip>=20", "    - pip:", *["    " + line for line in not_in]]
        return [*lines, ""]
